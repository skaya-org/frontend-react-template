import React, { useState, JSX, useMemo } from 'react';
import { motion, Variants } from 'framer-motion';

// --- Constants and Configuration ---

/**
 * @constant CRITTER_SIZE
 * @description The uniform size (width and height) for the critter component in pixels.
 */
const CRITTER_SIZE: number = 80;

/**
 * @constant CRITTER_COLORS
 * @description A centralized object for the critter's cyberpunk color palette.
 * This ensures consistency and easy theme updates.
 */
const CRITTER_COLORS = {
	body: '#34495E',
	bodyShadow: '#2C3E50',
	antenna: '#7F8C8D',
	eyeGlowDefault: '#00FFFF', // Neon Cyan
	eyeGlowGoal: '#39FF14', // Neon Green
	eyePupil: '#1a1a1a',
	goalIndicatorGlow: 'rgba(57, 255, 20, 0.75)',
};

// --- Framer Motion Variants ---

/**
 * @constant containerVariants
 * @description Animation variants for the main container of the critter.
 * Includes a subtle floating animation for its idle state.
 */
const containerVariants: Variants = {
	initial: {
		y: '0%',
	},
	animate: {
		y: ['0%', '-6%', '0%'],
		transition: {
			duration: 2.5,
			ease: 'easeInOut',
			repeat: Infinity,
		},
	},
};

/**
 * @constant goalIndicatorVariants
 * @description Animation variants for the glowing indicator shown when the critter reaches its goal.
 * It provides a gentle pulsing effect.
 */
const goalIndicatorVariants: Variants = {
	hidden: {
		opacity: 0,
		scale: 0.5,
	},
	visible: {
		opacity: 1,
		scale: 1,
		transition: {
			duration: 0.5,
			ease: 'backOut',
		},
	},
};

/**
 * @function createAntennaVariants
 * @description A factory function to generate animation variants for the antennae.
 * Using a function allows us to introduce a slight delay difference for a more natural,
 * de-synchronized sway.
 * @param {number} delay - The animation delay in seconds.
 * @returns {Variants} Framer Motion variants object.
 */
const createAntennaVariants = (delay: number): Variants => ({
	animate: {
		rotate: [0, -15, 15, -10, 10, 0],
		transition: {
			duration: 4,
			ease: 'easeInOut',
			repeat: Infinity,
			repeatType: 'loop',
			delay,
		},
	},
});

const leftAntennaVariants = createAntennaVariants(0);
const rightAntennaVariants = createAntennaVariants(0.3);

/**
 * @constant pupilVariants
 * @description Animation variants for the critter's pupils to simulate a periodic blinking effect.
 */
const pupilVariants: Variants = {
	animate: {
		scaleY: [1, 1, 1, 0.1, 1, 1], // Stays open, then a quick blink
		transition: {
			duration: 5, // Total duration of one loop
			ease: 'easeInOut',
			repeat: Infinity,
			repeatType: 'loop',
		},
	},
};

/**
 * @constant antennaTipVariants
 * @description Animation variants for the glowing tips of the antennae. It uses a dynamic
 * variant that accepts the current color via the `custom` prop, allowing the glow
 * color to change when the critter's state changes.
 */
const antennaTipVariants: Variants = {
	animate: (color: string) => ({
		filter: [
			`drop-shadow(0 0 2px ${color})`,
			`drop-shadow(0 0 5px ${color})`,
			`drop-shadow(0 0 2px ${color})`,
		],
		transition: {
			duration: 2.5,
			ease: 'easeInOut',
			repeat: Infinity,
		},
	}),
};

/**
 * Critter Component
 *
 * @component
 * @description A self-contained, interactive component representing an adorable robotic animal
 * with a cyberpunk aesthetic. It is designed to be placed on a game board. The component
 * manages its own internal state to visually indicate when it has "reached a goal",
 * toggled by a user click. It requires no external props or configuration.
 *
 * @example
 * // To use this component, simply import and render it:
 * import Critter from './Critter';
 *
 * const GameBoard = () => {
 *   return (
 *     <div>
 *       <Critter />
 *     </div>
 *   );
 * };
 */
const Critter = (): JSX.Element => {
	/**
	 * @state hasReachedGoal
	 * @description Manages the internal state of the critter.
	 * `true` if the critter has reached its goal, `false` otherwise.
	 * This state change triggers a visual update in the component.
	 */
	const [hasReachedGoal, setHasReachedGoal] = useState<boolean>(false);

	/**
	 * @function handleToggleGoalState
	 * @description Toggles the critter's goal state. This function is triggered
	 * on user click, providing a simple way to interact with and test the component's state.
	 */
	const handleToggleGoalState = (): void => {
		setHasReachedGoal(prevState => !prevState);
	};

	/**
	 * @memoized eyeColor
	 * @description Memoizes the current color for the critter's eyes based on its state.
	 * This prevents unnecessary recalculations on re-renders.
	 */
	const eyeColor = useMemo(
		() =>
			hasReachedGoal
				? CRITTER_COLORS.eyeGlowGoal
				: CRITTER_COLORS.eyeGlowDefault,
		[hasReachedGoal]
	);

	// The `as Variants` cast is used to satisfy TypeScript, as it can have difficulty
	// inferring the complex types of Framer Motion's variant objects, especially
	// when they are generated by functions or contain dynamic properties.

	return (
		<motion.div
			onClick={handleToggleGoalState}
			className="relative flex h-[80px] w-[80px] cursor-pointer items-center justify-center"
			variants={containerVariants}
			initial="initial"
			animate="animate"
			whileHover={{ scale: 1.1, y: '-10%' }}
			whileTap={{ scale: 0.95 }}
			title={
				hasReachedGoal
					? 'Critter (Goal Reached!)'
					: 'Critter (Click to toggle goal state)'
			}
		>
			{/* Goal Reached Indicator */}
			<motion.div
				className="absolute bottom-[-5px] h-[16px] w-[64px] rounded-full blur-[10px]"
				style={{
					backgroundColor: CRITTER_COLORS.goalIndicatorGlow,
				}}
				variants={goalIndicatorVariants}
				initial="hidden"
				animate={hasReachedGoal ? 'visible' : 'hidden'}
			/>

			{/* Critter SVG */}
			<svg
				width={CRITTER_SIZE}
				height={CRITTER_SIZE}
				viewBox="0 0 100 100"
				xmlns="http://www.w3.org/2000/svg"
				className="overflow-visible"
			>
				{/* Antennae */}
				<motion.g
					style={{ transformOrigin: '30px 40px' }}
					variants={leftAntennaVariants as Variants}
					animate="animate"
				>
					<path
						d="M 30 40 Q 20 20 25 10"
						stroke={CRITTER_COLORS.antenna}
						strokeWidth="3"
						fill="none"
					/>
					<motion.circle
						cx="25"
						cy="10"
						r="4"
						fill={eyeColor}
						variants={antennaTipVariants as Variants}
						custom={eyeColor}
						animate="animate"
					/>
				</motion.g>
				<motion.g
					style={{ transformOrigin: '70px 40px' }}
					variants={rightAntennaVariants as Variants}
					animate="animate"
				>
					<path
						d="M 70 40 Q 80 20 75 10"
						stroke={CRITTER_COLORS.antenna}
						strokeWidth="3"
						fill="none"
					/>
					<motion.circle
						cx="75"
						cy="10"
						r="4"
						fill={eyeColor}
						variants={antennaTipVariants as Variants}
						custom={eyeColor}
						animate="animate"
					/>
				</motion.g>

				{/* Body */}
				<g>
					<path
						d="M 20 90 C 20 60, 80 60, 80 90 L 80 90 Q 50 105, 20 90 Z"
						fill={CRITTER_COLORS.bodyShadow}
						transform="translate(0, 2)"
					/>
					<path
						d="M 20 90 C 20 60, 80 60, 80 90 L 80 90 Q 50 105, 20 90 Z"
						fill={CRITTER_COLORS.body}
					/>
				</g>

				{/* Eyes */}
				<g>
					{/* Left Eye */}
					<circle
						cx="40"
						cy="75"
						r="12"
						fill={CRITTER_COLORS.bodyShadow}
					/>
					<circle
						cx="40"
						cy="75"
						r="8"
						fill={eyeColor}
						className="ease-in-out transition-colors duration-300"
						style={{
							filter: `drop-shadow(0 0 4px ${eyeColor})`,
						}}
					/>
					<motion.circle
						cx="40"
						cy="75"
						r="3"
						fill={CRITTER_COLORS.eyePupil}
						style={{ transformOrigin: 'center' }}
						variants={pupilVariants as Variants}
						animate="animate"
					/>

					{/* Right Eye */}
					<circle
						cx="60"
						cy="75"
						r="12"
						fill={CRITTER_COLORS.bodyShadow}
					/>
					<circle
						cx="60"
						cy="75"
						r="8"
						fill={eyeColor}
						className="ease-in-out transition-colors duration-300"
						style={{
							filter: `drop-shadow(0 0 4px ${eyeColor})`,
						}}
					/>
					<motion.circle
						cx="60"
						cy="75"
						r="3"
						fill={CRITTER_COLORS.eyePupil}
						style={{ transformOrigin: 'center' }}
						variants={pupilVariants as Variants}
						animate="animate"
					/>
				</g>
			</svg>
		</motion.div>
	);
};

export default Critter;